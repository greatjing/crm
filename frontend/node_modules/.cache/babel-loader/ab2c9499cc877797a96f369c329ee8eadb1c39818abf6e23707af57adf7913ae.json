{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  ref: \"editorContainer\",\n  \"class\": \"monaco-editor-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["/Users/guojingjing/2024-ai-code/crm/frontend/src/components/MonacoEditor.vue"],"sourcesContent":["<template>\n  <div ref=\"editorContainer\" class=\"monaco-editor-container\"></div>\n</template>\n\n<script>\nimport * as monaco from 'monaco-editor'\nimport { onMounted, onBeforeUnmount, watch, ref } from 'vue'\n\n// Python 代码片段\nconst pythonSnippets = [\n  {\n    label: 'def',\n    insertText: 'def ${1:function_name}(${2:parameters}):\\n\\t${3:pass}',\n    documentation: '创建一个函数'\n  },\n  {\n    label: 'class',\n    insertText: 'class ${1:ClassName}:\\n\\tdef __init__(self):\\n\\t\\t${2:pass}',\n    documentation: '创建一个类'\n  },\n  {\n    label: 'if',\n    insertText: 'if ${1:condition}:\\n\\t${2:pass}',\n    documentation: 'if 条件语句'\n  },\n  {\n    label: 'for',\n    insertText: 'for ${1:item} in ${2:items}:\\n\\t${3:pass}',\n    documentation: 'for 循环'\n  },\n  {\n    label: 'try',\n    insertText: 'try:\\n\\t${1:pass}\\nexcept ${2:Exception} as e:\\n\\t${3:pass}',\n    documentation: '异常处理'\n  }\n]\n\n// SQL 代码片段\nconst sqlSnippets = [\n  {\n    label: 'SELECT',\n    insertText: 'SELECT ${1:*}\\nFROM ${2:table_name}\\nWHERE ${3:condition}',\n    documentation: '查询数据'\n  },\n  {\n    label: 'INSERT',\n    insertText: 'INSERT INTO ${1:table_name} (${2:columns})\\nVALUES (${3:values})',\n    documentation: '插入数据'\n  },\n  {\n    label: 'UPDATE',\n    insertText: 'UPDATE ${1:table_name}\\nSET ${2:column} = ${3:value}\\nWHERE ${4:condition}',\n    documentation: '更新数据'\n  },\n  {\n    label: 'DELETE',\n    insertText: 'DELETE FROM ${1:table_name}\\nWHERE ${2:condition}',\n    documentation: '删除数据'\n  },\n  {\n    label: 'JOIN',\n    insertText: 'SELECT ${1:*}\\nFROM ${2:table1}\\nJOIN ${3:table2} ON ${4:condition}',\n    documentation: '表连接'\n  }\n]\n\n// 配置编辑器主题\nmonaco.editor.defineTheme('customTheme', {\n  base: 'vs-dark',\n  inherit: true,\n  rules: [\n    { token: 'keyword', foreground: '569CD6', fontStyle: 'bold' },\n    { token: 'string', foreground: 'CE9178' },\n    { token: 'number', foreground: 'B5CEA8' },\n    { token: 'comment', foreground: '6A9955', fontStyle: 'italic' }\n  ],\n  colors: {\n    'editor.background': '#1E1E1E',\n    'editor.foreground': '#D4D4D4',\n    'editor.lineHighlightBackground': '#2F3337',\n    'editorCursor.foreground': '#FFFFFF',\n    'editor.selectionBackground': '#264F78'\n  }\n})\n\nexport default {\n  name: 'MonacoEditor',\n  props: {\n    modelValue: {\n      type: String,\n      default: ''\n    },\n    language: {\n      type: String,\n      default: 'javascript'\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['update:modelValue', 'change', 'save'],\n  setup(props, { emit }) {\n    let editor = null\n    const editorContainer = ref(null)\n\n    const defaultOptions = {\n      theme: 'customTheme',\n      fontSize: 14,\n      minimap: { enabled: false },\n      scrollBeyondLastLine: false,\n      automaticLayout: true,\n      tabSize: 4,\n      wordWrap: 'on',\n      wrappingIndent: 'indent',\n      autoIndent: 'advanced',\n      formatOnPaste: true,\n      formatOnType: true,\n      suggestOnTriggerCharacters: true,\n      snippetSuggestions: 'top',\n      lineNumbers: 'on',\n      renderWhitespace: 'selection',\n      matchBrackets: 'always',\n      autoClosingBrackets: 'always',\n      autoClosingQuotes: 'always',\n      folding: true,\n      showFoldingControls: 'always'\n    }\n\n    const registerLanguageProviders = () => {\n      if (props.language === 'python') {\n        monaco.languages.registerCompletionItemProvider('python', {\n          provideCompletionItems: () => {\n            const suggestions = pythonSnippets.map(snippet => ({\n              label: snippet.label,\n              kind: monaco.languages.CompletionItemKind.Snippet,\n              insertText: snippet.insertText,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              documentation: snippet.documentation\n            }))\n            return { suggestions }\n          }\n        })\n      } else if (props.language === 'sql') {\n        monaco.languages.registerCompletionItemProvider('sql', {\n          provideCompletionItems: () => {\n            const suggestions = sqlSnippets.map(snippet => ({\n              label: snippet.label,\n              kind: monaco.languages.CompletionItemKind.Snippet,\n              insertText: snippet.insertText,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              documentation: snippet.documentation\n            }))\n            return { suggestions }\n          }\n        })\n      }\n    }\n\n    const initMonaco = () => {\n      const options = {\n        ...defaultOptions,\n        ...props.options,\n        value: props.modelValue,\n        language: props.language,\n        readOnly: props.readOnly\n      }\n\n      editor = monaco.editor.create(editorContainer.value, options)\n      registerLanguageProviders()\n\n      editor.onDidChangeModelContent(() => {\n        const value = editor.getValue()\n        emit('update:modelValue', value)\n        emit('change', value)\n      })\n\n      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, () => {\n        emit('save', editor.getValue())\n      })\n\n      // 添加格式化命令\n      editor.addCommand(monaco.KeyMod.Alt | monaco.KeyMod.Shift | monaco.KeyCode.KeyF, () => {\n        editor.getAction('editor.action.formatDocument').run()\n      })\n    }\n\n    onMounted(() => {\n      initMonaco()\n    })\n\n    onBeforeUnmount(() => {\n      if (editor) {\n        editor.dispose()\n      }\n    })\n\n    watch(() => props.modelValue, (newValue) => {\n      if (editor && newValue !== editor.getValue()) {\n        editor.setValue(newValue)\n      }\n    })\n\n    watch(() => props.language, (newValue) => {\n      if (editor) {\n        monaco.editor.setModelLanguage(editor.getModel(), newValue)\n        registerLanguageProviders()\n      }\n    })\n\n    watch(() => props.readOnly, (newValue) => {\n      if (editor) {\n        editor.updateOptions({ readOnly: newValue })\n      }\n    })\n\n    return {\n      editorContainer\n    }\n  }\n}\n</script>\n\n<style scoped>\n.monaco-editor-container {\n  width: 100%;\n  height: 100%;\n  border-radius: 4px;\n  overflow: hidden;\n}\n</style> "],"mappings":";;EACOA,GAAG,EAAC,iBAAiB;EAAC,SAAM;;;uBAAjCC,mBAAA,CAAiE,OAAjEC,UAAiE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}