{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"monaco-editor-wrapper\"\n};\nvar _hoisted_2 = {\n  ref: \"editorContainer\",\n  \"class\": \"monaco-editor-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sources":["/Users/guojingjing/2024-ai-code/crm/frontend/src/components/MonacoEditor.vue"],"sourcesContent":["<template>\n  <div class=\"monaco-editor-wrapper\">\n    <div ref=\"editorContainer\" class=\"monaco-editor-container\"></div>\n  </div>\n</template>\n\n<script setup>\nimport * as monaco from 'monaco-editor'\nimport { onMounted, onBeforeUnmount, watch, ref, nextTick } from 'vue'\n\nconst props = defineProps({\n  modelValue: {\n    type: String,\n    default: ''\n  },\n  language: {\n    type: String,\n    default: 'javascript'\n  },\n  options: {\n    type: Object,\n    default: () => ({})\n  },\n  readOnly: {\n    type: Boolean,\n    default: false\n  }\n})\n\nconst emit = defineEmits(['update:modelValue', 'change', 'save'])\nconst editorContainer = ref(null)\nlet editor = null\n\nconst defaultOptions = {\n  theme: 'vs-dark',\n  fontSize: 14,\n  minimap: { enabled: false },\n  scrollBeyondLastLine: false,\n  automaticLayout: true,\n  tabSize: 4,\n  wordWrap: 'on',\n  wrappingIndent: 'indent',\n  autoIndent: 'advanced',\n  formatOnPaste: true,\n  formatOnType: true,\n  suggestOnTriggerCharacters: true,\n  snippetSuggestions: 'top',\n  lineNumbers: 'on',\n  renderWhitespace: 'selection',\n  matchBrackets: 'always',\n  autoClosingBrackets: 'always',\n  autoClosingQuotes: 'always',\n  folding: true,\n  showFoldingControls: 'always',\n  contextmenu: true,\n  mouseWheelZoom: true,\n  quickSuggestions: {\n    other: true,\n    comments: true,\n    strings: true\n  },\n  renderControlCharacters: true,\n  renderLineHighlight: 'all',\n  scrollbar: {\n    vertical: 'visible',\n    horizontal: 'visible',\n    useShadows: true,\n    verticalHasArrows: true,\n    horizontalHasArrows: true\n  },\n  overviewRulerBorder: false,\n  hideCursorInOverviewRuler: true,\n  wordBasedSuggestions: true,\n  suggest: {\n    snippetsPreventQuickSuggestions: false\n  },\n  padding: {\n    top: 8,\n    bottom: 8\n  }\n}\n\n// Python 代码片段\nconst pythonSnippets = [\n  {\n    label: 'def',\n    insertText: 'def ${1:function_name}(${2:parameters}):\\n\\t${3:pass}',\n    documentation: '创建一个函数'\n  },\n  {\n    label: 'class',\n    insertText: 'class ${1:ClassName}:\\n\\tdef __init__(self):\\n\\t\\t${2:pass}',\n    documentation: '创建一个类'\n  },\n  {\n    label: 'if',\n    insertText: 'if ${1:condition}:\\n\\t${2:pass}',\n    documentation: 'if 条件语句'\n  },\n  {\n    label: 'for',\n    insertText: 'for ${1:item} in ${2:items}:\\n\\t${3:pass}',\n    documentation: 'for 循环'\n  },\n  {\n    label: 'try',\n    insertText: 'try:\\n\\t${1:pass}\\nexcept ${2:Exception} as e:\\n\\t${3:pass}',\n    documentation: '异常处理'\n  }\n]\n\n// SQL 代码片段\nconst sqlSnippets = [\n  {\n    label: 'SELECT',\n    insertText: 'SELECT ${1:*}\\nFROM ${2:table_name}\\nWHERE ${3:condition}',\n    documentation: '查询数据'\n  },\n  {\n    label: 'INSERT',\n    insertText: 'INSERT INTO ${1:table_name} (${2:columns})\\nVALUES (${3:values})',\n    documentation: '插入数据'\n  },\n  {\n    label: 'UPDATE',\n    insertText: 'UPDATE ${1:table_name}\\nSET ${2:column} = ${3:value}\\nWHERE ${4:condition}',\n    documentation: '更新数据'\n  },\n  {\n    label: 'DELETE',\n    insertText: 'DELETE FROM ${1:table_name}\\nWHERE ${2:condition}',\n    documentation: '删除数据'\n  },\n  {\n    label: 'JOIN',\n    insertText: 'SELECT ${1:*}\\nFROM ${2:table1}\\nJOIN ${3:table2} ON ${4:condition}',\n    documentation: '表连接'\n  }\n]\n\nconst registerLanguageProviders = () => {\n  if (props.language === 'python') {\n    monaco.languages.registerCompletionItemProvider('python', {\n      provideCompletionItems: () => {\n        const suggestions = pythonSnippets.map(snippet => ({\n          label: snippet.label,\n          kind: monaco.languages.CompletionItemKind.Snippet,\n          insertText: snippet.insertText,\n          insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          documentation: snippet.documentation,\n          detail: snippet.documentation\n        }))\n        return { suggestions }\n      },\n      triggerCharacters: ['d', 'c', 'i', 'f', 't']\n    })\n  } else if (props.language === 'sql') {\n    monaco.languages.registerCompletionItemProvider('sql', {\n      provideCompletionItems: () => {\n        const suggestions = sqlSnippets.map(snippet => ({\n          label: snippet.label,\n          kind: monaco.languages.CompletionItemKind.Snippet,\n          insertText: snippet.insertText,\n          insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n          documentation: snippet.documentation,\n          detail: snippet.documentation\n        }))\n        return { suggestions }\n      },\n      triggerCharacters: ['S', 'I', 'U', 'D', 'J']\n    })\n  }\n}\n\nconst initMonaco = async () => {\n  await nextTick()\n  \n  if (!editorContainer.value) return\n\n  // 销毁旧的编辑器实例\n  if (editor) {\n    editor.dispose()\n  }\n\n  const options = {\n    ...defaultOptions,\n    ...props.options,\n    value: props.modelValue || '',\n    language: props.language,\n    readOnly: props.readOnly\n  }\n\n  // 创建新的编辑器实例\n  editor = monaco.editor.create(editorContainer.value, options)\n  \n  // 注册语言提供者\n  registerLanguageProviders()\n\n  // 监听内容变化\n  editor.onDidChangeModelContent(() => {\n    const value = editor.getValue()\n    emit('update:modelValue', value)\n    emit('change', value)\n  })\n\n  // 添加保存快捷键\n  editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, () => {\n    emit('save', editor.getValue())\n  })\n\n  // 添加格式化命令\n  editor.addCommand(monaco.KeyMod.Alt | monaco.KeyMod.Shift | monaco.KeyCode.KeyF, () => {\n    editor.getAction('editor.action.formatDocument').run()\n  })\n\n  // 设置初始值\n  if (props.modelValue) {\n    editor.setValue(props.modelValue)\n  }\n\n  // 聚焦编辑器\n  editor.focus()\n\n  // 强制重新布局\n  const resizeHandler = () => {\n    if (editor) {\n      editor.layout()\n    }\n  }\n  window.addEventListener('resize', resizeHandler)\n\n  // 确保编辑器正确显示\n  setTimeout(() => {\n    resizeHandler()\n  }, 100)\n}\n\nonMounted(async () => {\n  await initMonaco()\n})\n\nonBeforeUnmount(() => {\n  if (editor) {\n    editor.dispose()\n  }\n  window.removeEventListener('resize', () => {\n    if (editor) {\n      editor.layout()\n    }\n  })\n})\n\nwatch(() => props.modelValue, (newValue) => {\n  if (editor && newValue !== editor.getValue()) {\n    editor.setValue(newValue || '')\n  }\n})\n\nwatch(() => props.language, async (newValue) => {\n  if (editor) {\n    monaco.editor.setModelLanguage(editor.getModel(), newValue)\n    await nextTick()\n    registerLanguageProviders()\n  }\n})\n\nwatch(() => props.readOnly, (newValue) => {\n  if (editor) {\n    editor.updateOptions({ readOnly: newValue })\n  }\n})\n</script>\n\n<style>\n.monaco-editor-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n\n.monaco-editor-container {\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  overflow: hidden;\n}\n\n/* 确保编辑器容器可以正确显示 */\n.monaco-editor {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n/* 修复编辑器内容区域的样式 */\n.monaco-editor .overflow-guard {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n/* 修复编辑器滚动条样式 */\n.monaco-scrollable-element {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n/* 添加编辑器内边距 */\n.monaco-editor .margin {\n  margin-top: 8px !important;\n}\n\n.monaco-editor .monaco-scrollable-element .monaco-editor-background {\n  padding: 8px !important;\n}\n</style> "],"mappings":";;EACO,SAAM;AAAuB;;EAC3BA,GAAG,EAAC,iBAAiB;EAAC,SAAM;;;uBADnCC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAiE,OAAjEC,UAAiE,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}