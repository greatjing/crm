{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  ref: \"editorContainer\",\n  \"class\": \"monaco-editor-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["/Users/guojingjing/2024-ai-code/crm/frontend/src/components/MonacoEditor.vue"],"sourcesContent":["<template>\n  <div ref=\"editorContainer\" class=\"monaco-editor-container\"></div>\n</template>\n\n<script>\nimport * as monaco from 'monaco-editor'\nimport { onMounted, onBeforeUnmount, watch, ref } from 'vue'\n\n// 配置编辑器主题\nmonaco.editor.defineTheme('customTheme', {\n  base: 'vs-dark',\n  inherit: true,\n  rules: [],\n  colors: {\n    'editor.background': '#1e1e1e',\n  }\n})\n\nexport default {\n  name: 'MonacoEditor',\n  props: {\n    modelValue: {\n      type: String,\n      default: ''\n    },\n    language: {\n      type: String,\n      default: 'javascript'\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['update:modelValue', 'change', 'save'],\n  setup(props, { emit }) {\n    let editor = null\n    const editorContainer = ref(null)\n\n    const defaultOptions = {\n      theme: 'customTheme',\n      fontSize: 14,\n      minimap: { enabled: false },\n      scrollBeyondLastLine: false,\n      automaticLayout: true,\n      tabSize: 2,\n      wordWrap: 'on',\n      wrappingIndent: 'indent',\n      autoIndent: 'full',\n      formatOnPaste: true,\n      formatOnType: true,\n      suggestOnTriggerCharacters: true,\n      snippetSuggestions: 'top'\n    }\n\n    const initMonaco = () => {\n      const options = {\n        ...defaultOptions,\n        ...props.options,\n        value: props.modelValue,\n        language: props.language,\n        readOnly: props.readOnly\n      }\n\n      editor = monaco.editor.create(editorContainer.value, options)\n\n      // 监听内容变化\n      editor.onDidChangeModelContent(() => {\n        const value = editor.getValue()\n        emit('update:modelValue', value)\n        emit('change', value)\n      })\n\n      // 添加保存快捷键\n      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, () => {\n        emit('save', editor.getValue())\n      })\n\n      // 自动补全配置\n      monaco.languages.registerCompletionItemProvider(props.language, {\n        provideCompletionItems: () => {\n          const suggestions = []\n          if (props.language === 'python') {\n            suggestions.push(\n              {\n                label: 'def',\n                kind: monaco.languages.CompletionItemKind.Snippet,\n                insertText: 'def ${1:function_name}(${2:parameters}):\\n\\t${3:pass}',\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n              },\n              {\n                label: 'class',\n                kind: monaco.languages.CompletionItemKind.Snippet,\n                insertText: 'class ${1:ClassName}:\\n\\tdef __init__(self):\\n\\t\\t${2:pass}',\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n              }\n            )\n          } else if (props.language === 'sql') {\n            suggestions.push(\n              {\n                label: 'SELECT',\n                kind: monaco.languages.CompletionItemKind.Snippet,\n                insertText: 'SELECT ${1:*} FROM ${2:table_name}',\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n              },\n              {\n                label: 'INSERT',\n                kind: monaco.languages.CompletionItemKind.Snippet,\n                insertText: 'INSERT INTO ${1:table_name} (${2:columns}) VALUES (${3:values})',\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n              }\n            )\n          }\n          return { suggestions }\n        }\n      })\n    }\n\n    onMounted(() => {\n      initMonaco()\n    })\n\n    onBeforeUnmount(() => {\n      if (editor) {\n        editor.dispose()\n      }\n    })\n\n    watch(() => props.modelValue, (newValue) => {\n      if (editor && newValue !== editor.getValue()) {\n        editor.setValue(newValue)\n      }\n    })\n\n    watch(() => props.language, (newValue) => {\n      if (editor) {\n        monaco.editor.setModelLanguage(editor.getModel(), newValue)\n      }\n    })\n\n    watch(() => props.readOnly, (newValue) => {\n      if (editor) {\n        editor.updateOptions({ readOnly: newValue })\n      }\n    })\n\n    return {\n      editorContainer\n    }\n  }\n}\n</script>\n\n<style scoped>\n.monaco-editor-container {\n  width: 100%;\n  height: 100%;\n  border-radius: 4px;\n  overflow: hidden;\n}\n</style> "],"mappings":";;EACOA,GAAG,EAAC,iBAAiB;EAAC,SAAM;;;uBAAjCC,mBAAA,CAAiE,OAAjEC,UAAiE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}