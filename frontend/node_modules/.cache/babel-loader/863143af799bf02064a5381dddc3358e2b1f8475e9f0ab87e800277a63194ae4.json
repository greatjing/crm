{"ast":null,"code":"import _objectSpread from \"/Users/guojingjing/2024-ai-code/crm/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport * as monaco from 'monaco-editor';\nimport { onMounted, onBeforeUnmount, watch, ref } from 'vue';\n\n// 配置编辑器主题\nmonaco.editor.defineTheme('customTheme', {\n  base: 'vs-dark',\n  inherit: true,\n  rules: [],\n  colors: {\n    'editor.background': '#1e1e1e'\n  }\n});\nexport default {\n  name: 'MonacoEditor',\n  props: {\n    modelValue: {\n      type: String,\n      \"default\": ''\n    },\n    language: {\n      type: String,\n      \"default\": 'javascript'\n    },\n    options: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    readOnly: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  emits: ['update:modelValue', 'change', 'save'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var editor = null;\n    var editorContainer = ref(null);\n    var defaultOptions = {\n      theme: 'customTheme',\n      fontSize: 14,\n      minimap: {\n        enabled: false\n      },\n      scrollBeyondLastLine: false,\n      automaticLayout: true,\n      tabSize: 2,\n      wordWrap: 'on',\n      wrappingIndent: 'indent',\n      autoIndent: 'full',\n      formatOnPaste: true,\n      formatOnType: true,\n      suggestOnTriggerCharacters: true,\n      snippetSuggestions: 'top'\n    };\n    var initMonaco = function initMonaco() {\n      var options = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions), props.options), {}, {\n        value: props.modelValue,\n        language: props.language,\n        readOnly: props.readOnly\n      });\n      editor = monaco.editor.create(editorContainer.value, options);\n\n      // 监听内容变化\n      editor.onDidChangeModelContent(function () {\n        var value = editor.getValue();\n        emit('update:modelValue', value);\n        emit('change', value);\n      });\n\n      // 添加保存快捷键\n      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, function () {\n        emit('save', editor.getValue());\n      });\n\n      // 自动补全配置\n      monaco.languages.registerCompletionItemProvider(props.language, {\n        provideCompletionItems: function provideCompletionItems() {\n          var suggestions = [];\n          if (props.language === 'python') {\n            suggestions.push({\n              label: 'def',\n              kind: monaco.languages.CompletionItemKind.Snippet,\n              insertText: 'def ${1:function_name}(${2:parameters}):\\n\\t${3:pass}',\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n            }, {\n              label: 'class',\n              kind: monaco.languages.CompletionItemKind.Snippet,\n              insertText: 'class ${1:ClassName}:\\n\\tdef __init__(self):\\n\\t\\t${2:pass}',\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n            });\n          } else if (props.language === 'sql') {\n            suggestions.push({\n              label: 'SELECT',\n              kind: monaco.languages.CompletionItemKind.Snippet,\n              insertText: 'SELECT ${1:*} FROM ${2:table_name}',\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n            }, {\n              label: 'INSERT',\n              kind: monaco.languages.CompletionItemKind.Snippet,\n              insertText: 'INSERT INTO ${1:table_name} (${2:columns}) VALUES (${3:values})',\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n            });\n          }\n          return {\n            suggestions: suggestions\n          };\n        }\n      });\n    };\n    onMounted(function () {\n      initMonaco();\n    });\n    onBeforeUnmount(function () {\n      if (editor) {\n        editor.dispose();\n      }\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function (newValue) {\n      if (editor && newValue !== editor.getValue()) {\n        editor.setValue(newValue);\n      }\n    });\n    watch(function () {\n      return props.language;\n    }, function (newValue) {\n      if (editor) {\n        monaco.editor.setModelLanguage(editor.getModel(), newValue);\n      }\n    });\n    watch(function () {\n      return props.readOnly;\n    }, function (newValue) {\n      if (editor) {\n        editor.updateOptions({\n          readOnly: newValue\n        });\n      }\n    });\n    return {\n      editorContainer: editorContainer\n    };\n  }\n};","map":{"version":3,"names":["monaco","onMounted","onBeforeUnmount","watch","ref","editor","defineTheme","base","inherit","rules","colors","name","props","modelValue","type","String","language","options","Object","default","readOnly","Boolean","emits","setup","_ref","emit","editorContainer","defaultOptions","theme","fontSize","minimap","enabled","scrollBeyondLastLine","automaticLayout","tabSize","wordWrap","wrappingIndent","autoIndent","formatOnPaste","formatOnType","suggestOnTriggerCharacters","snippetSuggestions","initMonaco","_objectSpread","value","create","onDidChangeModelContent","getValue","addCommand","KeyMod","CtrlCmd","KeyCode","KeyS","languages","registerCompletionItemProvider","provideCompletionItems","suggestions","push","label","kind","CompletionItemKind","Snippet","insertText","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","dispose","newValue","setValue","setModelLanguage","getModel","updateOptions"],"sources":["/Users/guojingjing/2024-ai-code/crm/frontend/src/components/MonacoEditor.vue"],"sourcesContent":["<template>\n  <div ref=\"editorContainer\" class=\"monaco-editor-container\"></div>\n</template>\n\n<script>\nimport * as monaco from 'monaco-editor'\nimport { onMounted, onBeforeUnmount, watch, ref } from 'vue'\n\n// 配置编辑器主题\nmonaco.editor.defineTheme('customTheme', {\n  base: 'vs-dark',\n  inherit: true,\n  rules: [],\n  colors: {\n    'editor.background': '#1e1e1e',\n  }\n})\n\nexport default {\n  name: 'MonacoEditor',\n  props: {\n    modelValue: {\n      type: String,\n      default: ''\n    },\n    language: {\n      type: String,\n      default: 'javascript'\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['update:modelValue', 'change', 'save'],\n  setup(props, { emit }) {\n    let editor = null\n    const editorContainer = ref(null)\n\n    const defaultOptions = {\n      theme: 'customTheme',\n      fontSize: 14,\n      minimap: { enabled: false },\n      scrollBeyondLastLine: false,\n      automaticLayout: true,\n      tabSize: 2,\n      wordWrap: 'on',\n      wrappingIndent: 'indent',\n      autoIndent: 'full',\n      formatOnPaste: true,\n      formatOnType: true,\n      suggestOnTriggerCharacters: true,\n      snippetSuggestions: 'top'\n    }\n\n    const initMonaco = () => {\n      const options = {\n        ...defaultOptions,\n        ...props.options,\n        value: props.modelValue,\n        language: props.language,\n        readOnly: props.readOnly\n      }\n\n      editor = monaco.editor.create(editorContainer.value, options)\n\n      // 监听内容变化\n      editor.onDidChangeModelContent(() => {\n        const value = editor.getValue()\n        emit('update:modelValue', value)\n        emit('change', value)\n      })\n\n      // 添加保存快捷键\n      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, () => {\n        emit('save', editor.getValue())\n      })\n\n      // 自动补全配置\n      monaco.languages.registerCompletionItemProvider(props.language, {\n        provideCompletionItems: () => {\n          const suggestions = []\n          if (props.language === 'python') {\n            suggestions.push(\n              {\n                label: 'def',\n                kind: monaco.languages.CompletionItemKind.Snippet,\n                insertText: 'def ${1:function_name}(${2:parameters}):\\n\\t${3:pass}',\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n              },\n              {\n                label: 'class',\n                kind: monaco.languages.CompletionItemKind.Snippet,\n                insertText: 'class ${1:ClassName}:\\n\\tdef __init__(self):\\n\\t\\t${2:pass}',\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n              }\n            )\n          } else if (props.language === 'sql') {\n            suggestions.push(\n              {\n                label: 'SELECT',\n                kind: monaco.languages.CompletionItemKind.Snippet,\n                insertText: 'SELECT ${1:*} FROM ${2:table_name}',\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n              },\n              {\n                label: 'INSERT',\n                kind: monaco.languages.CompletionItemKind.Snippet,\n                insertText: 'INSERT INTO ${1:table_name} (${2:columns}) VALUES (${3:values})',\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n              }\n            )\n          }\n          return { suggestions }\n        }\n      })\n    }\n\n    onMounted(() => {\n      initMonaco()\n    })\n\n    onBeforeUnmount(() => {\n      if (editor) {\n        editor.dispose()\n      }\n    })\n\n    watch(() => props.modelValue, (newValue) => {\n      if (editor && newValue !== editor.getValue()) {\n        editor.setValue(newValue)\n      }\n    })\n\n    watch(() => props.language, (newValue) => {\n      if (editor) {\n        monaco.editor.setModelLanguage(editor.getModel(), newValue)\n      }\n    })\n\n    watch(() => props.readOnly, (newValue) => {\n      if (editor) {\n        editor.updateOptions({ readOnly: newValue })\n      }\n    })\n\n    return {\n      editorContainer\n    }\n  }\n}\n</script>\n\n<style scoped>\n.monaco-editor-container {\n  width: 100%;\n  height: 100%;\n  border-radius: 4px;\n  overflow: hidden;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}