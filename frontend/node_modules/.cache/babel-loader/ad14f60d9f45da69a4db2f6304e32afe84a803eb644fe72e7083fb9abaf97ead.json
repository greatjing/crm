{"ast":null,"code":"import _regeneratorRuntime from \"/Users/guojingjing/2024-ai-code/crm/frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/guojingjing/2024-ai-code/crm/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.object.define-property.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { ref, onMounted } from 'vue';\nimport { useRoute } from 'vue-router';\nimport { ElMessage } from 'element-plus';\nimport { testApi } from '@/api/test';\n// import { strategyApi } from '@/api/strategy'\n\nexport default {\n  __name: 'StrategyTest',\n  setup: function setup(__props, _ref) {\n    var __expose = _ref.expose;\n    __expose();\n    var route = useRoute();\n    var strategyId = route.params.id;\n    var generatorConfig = ref({\n      count: 10,\n      data_patterns: {\n        credit_score: {\n          type: 'random_int',\n          min: 300,\n          max: 850\n        },\n        loan_amount: {\n          type: 'random_float',\n          min: 1000,\n          max: 1000000\n        },\n        annual_income: {\n          type: 'random_float',\n          min: 10000,\n          max: 1000000\n        }\n      },\n      include_edge_cases: true\n    });\n    var testData = ref([]);\n    var currentBatchId = ref(null);\n    var testReport = ref(null);\n    var pollingTimer = ref(null);\n    var batchStatus = ref('pending');\n    var generateData = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return testApi.generateTestData(generatorConfig.value);\n            case 3:\n              response = _context.sent;\n              testData.value = response.data;\n              ElMessage.success('测试数据生成成功');\n              _context.next = 11;\n              break;\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](0);\n              ElMessage.error('生成测试数据失败：' + _context.t0.message);\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 8]]);\n      }));\n      return function generateData() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    var runTests = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response, _error$response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return testApi.createTestBatch({\n                name: \"\\u7B56\\u7565\".concat(strategyId, \"\\u6D4B\\u8BD5\\u6279\\u6B21\"),\n                description: '自动生成的测试批次',\n                strategy_id: parseInt(strategyId),\n                test_cases: testData.value\n              });\n            case 3:\n              response = _context2.sent;\n              currentBatchId.value = response.data.id;\n              ElMessage.success('测试批次已创建，开始执行测试');\n              console.log('Created test batch:', response.data);\n\n              // 立即开始轮询\n              _context2.next = 9;\n              return pollTestStatus();\n            case 9:\n              startPolling();\n              _context2.next = 16;\n              break;\n            case 12:\n              _context2.prev = 12;\n              _context2.t0 = _context2[\"catch\"](0);\n              console.error('Create test batch error:', _context2.t0);\n              ElMessage.error('创建测试批次失败：' + (((_error$response = _context2.t0.response) === null || _error$response === void 0 || (_error$response = _error$response.data) === null || _error$response === void 0 ? void 0 : _error$response.detail) || _context2.t0.message));\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[0, 12]]);\n      }));\n      return function runTests() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    var pollTestStatus = /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var response, _error$response2;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              console.log('Polling test status for batch:', currentBatchId.value);\n              _context3.next = 4;\n              return testApi.getTestBatch(currentBatchId.value);\n            case 4:\n              response = _context3.sent;\n              console.log('Poll response:', response.data);\n              batchStatus.value = response.data.status;\n              if (!(batchStatus.value === 'completed' || batchStatus.value === 'failed')) {\n                _context3.next = 14;\n                break;\n              }\n              console.log('Test batch completed with status:', batchStatus.value);\n              stopPolling();\n              _context3.next = 12;\n              return loadTestReport();\n            case 12:\n              _context3.next = 15;\n              break;\n            case 14:\n              console.log('Test batch still running:', batchStatus.value);\n            case 15:\n              _context3.next = 22;\n              break;\n            case 17:\n              _context3.prev = 17;\n              _context3.t0 = _context3[\"catch\"](0);\n              console.error('Poll status error:', _context3.t0);\n              stopPolling();\n              ElMessage.error('获取测试状态失败：' + (((_error$response2 = _context3.t0.response) === null || _error$response2 === void 0 || (_error$response2 = _error$response2.data) === null || _error$response2 === void 0 ? void 0 : _error$response2.detail) || _context3.t0.message));\n            case 22:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, null, [[0, 17]]);\n      }));\n      return function pollTestStatus() {\n        return _ref4.apply(this, arguments);\n      };\n    }();\n    var startPolling = function startPolling() {\n      pollingTimer.value = setInterval(pollTestStatus, 2000);\n    };\n    var stopPolling = function stopPolling() {\n      if (pollingTimer.value) {\n        clearInterval(pollingTimer.value);\n        pollingTimer.value = null;\n      }\n    };\n    var loadTestReport = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var response, _error$response3;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              console.log('Loading test report for batch:', currentBatchId.value);\n              _context4.next = 4;\n              return testApi.getTestReport(currentBatchId.value);\n            case 4:\n              response = _context4.sent;\n              console.log('Test report:', response.data);\n              testReport.value = response.data;\n              ElMessage.success('测试执行完成');\n              _context4.next = 14;\n              break;\n            case 10:\n              _context4.prev = 10;\n              _context4.t0 = _context4[\"catch\"](0);\n              console.error('Load report error:', _context4.t0);\n              ElMessage.error('加载测试报告失败：' + (((_error$response3 = _context4.t0.response) === null || _error$response3 === void 0 || (_error$response3 = _error$response3.data) === null || _error$response3 === void 0 ? void 0 : _error$response3.detail) || _context4.t0.message));\n            case 14:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, null, [[0, 10]]);\n      }));\n      return function loadTestReport() {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    var exportReport = function exportReport() {\n      // TODO: 实现报告导出功能\n      ElMessage.info('报告导出功能开发中');\n    };\n    var getStatusType = function getStatusType(status) {\n      var statusMap = {\n        pending: 'info',\n        running: 'warning',\n        passed: 'success',\n        failed: 'danger',\n        error: 'danger'\n      };\n      return statusMap[status] || 'info';\n    };\n\n    // 添加状态文本映射\n    var getStatusText = function getStatusText(status) {\n      var statusMap = {\n        pending: '等待执行',\n        running: '执行中',\n        passed: '通过',\n        failed: '失败',\n        error: '错误'\n      };\n      return statusMap[status] || status;\n    };\n\n    // 添加批次状态文本映射\n    var getBatchStatusText = function getBatchStatusText(status) {\n      var statusMap = {\n        pending: '等待执行',\n        running: '执行中',\n        completed: '执行完成',\n        failed: '执行失败'\n      };\n      return statusMap[status] || status;\n    };\n\n    // 添加批次状态类型映射\n    var getBatchStatusType = function getBatchStatusType(status) {\n      var statusMap = {\n        pending: 'info',\n        running: 'warning',\n        completed: 'success',\n        failed: 'danger'\n      };\n      return statusMap[status] || 'info';\n    };\n    onMounted(function () {\n      if (!strategyId) {\n        ElMessage.error('策略ID不能为空');\n        return;\n      }\n    });\n    var __returned__ = {\n      route: route,\n      strategyId: strategyId,\n      generatorConfig: generatorConfig,\n      testData: testData,\n      currentBatchId: currentBatchId,\n      testReport: testReport,\n      pollingTimer: pollingTimer,\n      batchStatus: batchStatus,\n      generateData: generateData,\n      runTests: runTests,\n      pollTestStatus: pollTestStatus,\n      startPolling: startPolling,\n      stopPolling: stopPolling,\n      loadTestReport: loadTestReport,\n      exportReport: exportReport,\n      getStatusType: getStatusType,\n      getStatusText: getStatusText,\n      getBatchStatusText: getBatchStatusText,\n      getBatchStatusType: getBatchStatusType,\n      ref: ref,\n      onMounted: onMounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get ElMessage() {\n        return ElMessage;\n      },\n      get testApi() {\n        return testApi;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","useRoute","ElMessage","testApi","route","strategyId","params","id","generatorConfig","count","data_patterns","credit_score","type","min","max","loan_amount","annual_income","include_edge_cases","testData","currentBatchId","testReport","pollingTimer","batchStatus","generateData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_callee$","_context","prev","next","generateTestData","value","sent","data","success","t0","error","message","stop","apply","arguments","runTests","_ref3","_callee2","_error$response","_callee2$","_context2","createTestBatch","name","concat","description","strategy_id","parseInt","test_cases","console","log","pollTestStatus","startPolling","detail","_ref4","_callee3","_error$response2","_callee3$","_context3","getTestBatch","status","stopPolling","loadTestReport","setInterval","clearInterval","_ref5","_callee4","_error$response3","_callee4$","_context4","getTestReport","exportReport","info","getStatusType","statusMap","pending","running","passed","failed","getStatusText","getBatchStatusText","completed","getBatchStatusType"],"sources":["/Users/guojingjing/2024-ai-code/crm/frontend/src/views/strategy/StrategyTest.vue"],"sourcesContent":["<template>\n  <div class=\"strategy-test\">\n    <div class=\"header\">\n      <h2>策略测试</h2>\n    </div>\n\n    <!-- 测试数据生成器 -->\n    <el-card class=\"data-generator\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>测试数据生成器</span>\n        </div>\n      </template>\n      \n      <el-form :model=\"generatorConfig\" label-width=\"120px\">\n        <el-form-item label=\"生成数量\">\n          <el-input-number v-model=\"generatorConfig.count\" :min=\"1\" :max=\"100\" />\n        </el-form-item>\n        \n        <el-form-item label=\"信用分数范围\">\n          <el-col :span=\"11\">\n            <el-input-number v-model=\"generatorConfig.data_patterns.credit_score.min\" :min=\"300\" :max=\"850\" />\n          </el-col>\n          <el-col :span=\"2\" class=\"text-center\">-</el-col>\n          <el-col :span=\"11\">\n            <el-input-number v-model=\"generatorConfig.data_patterns.credit_score.max\" :min=\"300\" :max=\"850\" />\n          </el-col>\n        </el-form-item>\n        \n        <el-form-item label=\"贷款金额范围\">\n          <el-col :span=\"11\">\n            <el-input-number v-model=\"generatorConfig.data_patterns.loan_amount.min\" :min=\"1000\" :max=\"1000000\" />\n          </el-col>\n          <el-col :span=\"2\" class=\"text-center\">-</el-col>\n          <el-col :span=\"11\">\n            <el-input-number v-model=\"generatorConfig.data_patterns.loan_amount.max\" :min=\"1000\" :max=\"1000000\" />\n          </el-col>\n        </el-form-item>\n        \n        <el-form-item label=\"年收入范围\">\n          <el-col :span=\"11\">\n            <el-input-number v-model=\"generatorConfig.data_patterns.annual_income.min\" :min=\"10000\" :max=\"1000000\" />\n          </el-col>\n          <el-col :span=\"2\" class=\"text-center\">-</el-col>\n          <el-col :span=\"11\">\n            <el-input-number v-model=\"generatorConfig.data_patterns.annual_income.max\" :min=\"10000\" :max=\"1000000\" />\n          </el-col>\n        </el-form-item>\n        \n        <el-form-item label=\"包含边界值\">\n          <el-switch v-model=\"generatorConfig.include_edge_cases\" />\n        </el-form-item>\n        \n        <el-form-item>\n          <el-button type=\"primary\" @click=\"generateData\">生成测试数据</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n\n    <!-- 测试数据预览 -->\n    <el-card v-if=\"testData.length > 0\" class=\"data-preview\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>测试数据预览</span>\n          <el-button type=\"primary\" @click=\"runTests\">运行测试</el-button>\n        </div>\n      </template>\n      \n      <el-table :data=\"testData\" height=\"400\" border>\n        <el-table-column prop=\"input_data.credit_score\" label=\"信用分数\" width=\"120\" />\n        <el-table-column prop=\"input_data.loan_amount\" label=\"贷款金额\" width=\"120\" />\n        <el-table-column prop=\"input_data.annual_income\" label=\"年收入\" width=\"120\" />\n      </el-table>\n    </el-card>\n\n    <!-- 测试结果 -->\n    <el-card v-if=\"currentBatchId\" class=\"test-results\">\n      <template #header>\n        <div class=\"card-header\">\n          <span>测试结果</span>\n          <div>\n            <el-tag :type=\"getBatchStatusType(batchStatus)\">{{ getBatchStatusText(batchStatus) }}</el-tag>\n            <el-button v-if=\"testReport\" type=\"primary\" class=\"ml-2\" @click=\"exportReport\">导出报告</el-button>\n          </div>\n        </div>\n      </template>\n      \n      <div v-if=\"batchStatus === 'running'\" class=\"loading-state\">\n        <el-icon class=\"is-loading\"><Loading /></el-icon>\n        <p>正在执行测试...</p>\n      </div>\n\n      <div v-else-if=\"testReport\">\n        <!-- 测试统计 -->\n        <div class=\"statistics\">\n          <el-row :gutter=\"20\">\n            <el-col :span=\"6\">\n              <el-card shadow=\"hover\">\n                <template #header>总用例数</template>\n                <div class=\"statistic-value\">{{ testReport.statistics.total_cases }}</div>\n              </el-card>\n            </el-col>\n            <el-col :span=\"6\">\n              <el-card shadow=\"hover\">\n                <template #header>通过用例数</template>\n                <div class=\"statistic-value success\">{{ testReport.statistics.passed_cases }}</div>\n              </el-card>\n            </el-col>\n            <el-col :span=\"6\">\n              <el-card shadow=\"hover\">\n                <template #header>失败用例数</template>\n                <div class=\"statistic-value danger\">{{ testReport.statistics.failed_cases }}</div>\n              </el-card>\n            </el-col>\n            <el-col :span=\"6\">\n              <el-card shadow=\"hover\">\n                <template #header>错误用例数</template>\n                <div class=\"statistic-value warning\">{{ testReport.statistics.error_cases }}</div>\n              </el-card>\n            </el-col>\n          </el-row>\n          \n          <el-row :gutter=\"20\" class=\"mt-4\">\n            <el-col :span=\"8\">\n              <el-card shadow=\"hover\">\n                <template #header>平均执行时间</template>\n                <div class=\"statistic-value\">{{ testReport.statistics.avg_execution_time.toFixed(2) }} ms</div>\n              </el-card>\n            </el-col>\n            <el-col :span=\"8\">\n              <el-card shadow=\"hover\">\n                <template #header>最长执行时间</template>\n                <div class=\"statistic-value\">{{ testReport.statistics.max_execution_time }} ms</div>\n              </el-card>\n            </el-col>\n            <el-col :span=\"8\">\n              <el-card shadow=\"hover\">\n                <template #header>最短执行时间</template>\n                <div class=\"statistic-value\">{{ testReport.statistics.min_execution_time }} ms</div>\n              </el-card>\n            </el-col>\n          </el-row>\n        </div>\n        \n        <!-- 图表展示 -->\n        <div class=\"charts mt-4\">\n          <el-row :gutter=\"20\">\n            <el-col :span=\"8\" v-if=\"testReport.charts_data.results_distribution\">\n              <el-card shadow=\"hover\" class=\"chart-card\">\n                <template #header>测试结果分布</template>\n                <img :src=\"'data:image/png;base64,' + testReport.charts_data.results_distribution\" />\n              </el-card>\n            </el-col>\n            <el-col :span=\"8\" v-if=\"testReport.charts_data.risk_level_distribution\">\n              <el-card shadow=\"hover\" class=\"chart-card\">\n                <template #header>风险等级分布</template>\n                <img :src=\"'data:image/png;base64,' + testReport.charts_data.risk_level_distribution\" />\n              </el-card>\n            </el-col>\n            <el-col :span=\"8\" v-if=\"testReport.charts_data.execution_time_distribution\">\n              <el-card shadow=\"hover\" class=\"chart-card\">\n                <template #header>执行时间分布</template>\n                <img :src=\"'data:image/png;base64,' + testReport.charts_data.execution_time_distribution\" />\n              </el-card>\n            </el-col>\n          </el-row>\n        </div>\n        \n        <!-- 测试用例详情 -->\n        <div class=\"test-cases mt-4\">\n          <el-card shadow=\"hover\">\n            <template #header>测试用例详情</template>\n            <el-table :data=\"testReport.test_cases\" border stripe>\n              <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\n                <template #default=\"{ row }\">\n                  <el-tag :type=\"getStatusType(row.status)\">{{ getStatusText(row.status) }}</el-tag>\n                </template>\n              </el-table-column>\n              <el-table-column prop=\"input_data\" label=\"输入数据\" width=\"300\">\n                <template #default=\"{ row }\">\n                  <pre>{{ JSON.stringify(row.input_data, null, 2) }}</pre>\n                </template>\n              </el-table-column>\n              <el-table-column prop=\"actual_output\" label=\"输出结果\" width=\"300\">\n                <template #default=\"{ row }\">\n                  <pre v-if=\"row.actual_output\">{{ JSON.stringify(row.actual_output, null, 2) }}</pre>\n                </template>\n              </el-table-column>\n              <el-table-column prop=\"execution_time\" label=\"执行时间\" width=\"120\">\n                <template #default=\"{ row }\">\n                  {{ row.execution_time }} ms\n                </template>\n              </el-table-column>\n              <el-table-column prop=\"error_message\" label=\"错误信息\" min-width=\"200\">\n                <template #default=\"{ row }\">\n                  <span class=\"error-message\" v-if=\"row.error_message\">{{ row.error_message }}</span>\n                </template>\n              </el-table-column>\n            </el-table>\n          </el-card>\n        </div>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted } from 'vue'\nimport { useRoute } from 'vue-router'\nimport { ElMessage } from 'element-plus'\nimport { testApi } from '@/api/test'\n// import { strategyApi } from '@/api/strategy'\n\nconst route = useRoute()\nconst strategyId = route.params.id\n\nconst generatorConfig = ref({\n  count: 10,\n  data_patterns: {\n    credit_score: {\n      type: 'random_int',\n      min: 300,\n      max: 850\n    },\n    loan_amount: {\n      type: 'random_float',\n      min: 1000,\n      max: 1000000\n    },\n    annual_income: {\n      type: 'random_float',\n      min: 10000,\n      max: 1000000\n    }\n  },\n  include_edge_cases: true\n})\n\nconst testData = ref([])\nconst currentBatchId = ref(null)\nconst testReport = ref(null)\nconst pollingTimer = ref(null)\nconst batchStatus = ref('pending')\n\nconst generateData = async () => {\n  try {\n    const response = await testApi.generateTestData(generatorConfig.value)\n    testData.value = response.data\n    ElMessage.success('测试数据生成成功')\n  } catch (error) {\n    ElMessage.error('生成测试数据失败：' + error.message)\n  }\n}\n\nconst runTests = async () => {\n  try {\n    const response = await testApi.createTestBatch({\n      name: `策略${strategyId}测试批次`,\n      description: '自动生成的测试批次',\n      strategy_id: parseInt(strategyId),\n      test_cases: testData.value\n    })\n    \n    currentBatchId.value = response.data.id\n    ElMessage.success('测试批次已创建，开始执行测试')\n    console.log('Created test batch:', response.data)\n    \n    // 立即开始轮询\n    await pollTestStatus()\n    startPolling()\n  } catch (error) {\n    console.error('Create test batch error:', error)\n    ElMessage.error('创建测试批次失败：' + (error.response?.data?.detail || error.message))\n  }\n}\n\nconst pollTestStatus = async () => {\n  try {\n    console.log('Polling test status for batch:', currentBatchId.value)\n    const response = await testApi.getTestBatch(currentBatchId.value)\n    console.log('Poll response:', response.data)\n    \n    batchStatus.value = response.data.status\n    if (batchStatus.value === 'completed' || batchStatus.value === 'failed') {\n      console.log('Test batch completed with status:', batchStatus.value)\n      stopPolling()\n      await loadTestReport()\n    } else {\n      console.log('Test batch still running:', batchStatus.value)\n    }\n  } catch (error) {\n    console.error('Poll status error:', error)\n    stopPolling()\n    ElMessage.error('获取测试状态失败：' + (error.response?.data?.detail || error.message))\n  }\n}\n\nconst startPolling = () => {\n  pollingTimer.value = setInterval(pollTestStatus, 2000)\n}\n\nconst stopPolling = () => {\n  if (pollingTimer.value) {\n    clearInterval(pollingTimer.value)\n    pollingTimer.value = null\n  }\n}\n\nconst loadTestReport = async () => {\n  try {\n    console.log('Loading test report for batch:', currentBatchId.value)\n    const response = await testApi.getTestReport(currentBatchId.value)\n    console.log('Test report:', response.data)\n    testReport.value = response.data\n    ElMessage.success('测试执行完成')\n  } catch (error) {\n    console.error('Load report error:', error)\n    ElMessage.error('加载测试报告失败：' + (error.response?.data?.detail || error.message))\n  }\n}\n\nconst exportReport = () => {\n  // TODO: 实现报告导出功能\n  ElMessage.info('报告导出功能开发中')\n}\n\nconst getStatusType = (status) => {\n  const statusMap = {\n    pending: 'info',\n    running: 'warning',\n    passed: 'success',\n    failed: 'danger',\n    error: 'danger'\n  }\n  return statusMap[status] || 'info'\n}\n\n// 添加状态文本映射\nconst getStatusText = (status) => {\n  const statusMap = {\n    pending: '等待执行',\n    running: '执行中',\n    passed: '通过',\n    failed: '失败',\n    error: '错误'\n  }\n  return statusMap[status] || status\n}\n\n// 添加批次状态文本映射\nconst getBatchStatusText = (status) => {\n  const statusMap = {\n    pending: '等待执行',\n    running: '执行中',\n    completed: '执行完成',\n    failed: '执行失败'\n  }\n  return statusMap[status] || status\n}\n\n// 添加批次状态类型映射\nconst getBatchStatusType = (status) => {\n  const statusMap = {\n    pending: 'info',\n    running: 'warning',\n    completed: 'success',\n    failed: 'danger'\n  }\n  return statusMap[status] || 'info'\n}\n\nonMounted(() => {\n  if (!strategyId) {\n    ElMessage.error('策略ID不能为空')\n    return\n  }\n})\n</script>\n\n<style>\n.strategy-test {\n  padding: 20px;\n}\n\n.header {\n  margin-bottom: 20px;\n}\n\n.card-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.data-generator {\n  margin-bottom: 20px;\n}\n\n.data-preview {\n  margin-bottom: 20px;\n}\n\n.text-center {\n  text-align: center;\n  line-height: 32px;\n}\n\n.mt-4 {\n  margin-top: 16px;\n}\n\n.chart-container {\n  background: #fff;\n  padding: 16px;\n  border-radius: 4px;\n  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);\n}\n\n.chart-container h3 {\n  margin-top: 0;\n  margin-bottom: 16px;\n  font-size: 16px;\n}\n\n.chart-container img {\n  width: 100%;\n  height: auto;\n}\n\npre {\n  margin: 0;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  font-size: 12px;\n}\n\n.loading-state {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  padding: 40px;\n}\n\n.loading-state .el-icon {\n  font-size: 32px;\n  margin-bottom: 16px;\n}\n\n.statistic-value {\n  font-size: 24px;\n  font-weight: bold;\n  text-align: center;\n}\n\n.statistic-value.success {\n  color: #67C23A;\n}\n\n.statistic-value.danger {\n  color: #F56C6C;\n}\n\n.statistic-value.warning {\n  color: #E6A23C;\n}\n\n.chart-card {\n  height: 100%;\n}\n\n.chart-card img {\n  width: 100%;\n  height: auto;\n}\n\n.error-message {\n  color: #F56C6C;\n  white-space: pre-wrap;\n  word-break: break-word;\n}\n\n.ml-2 {\n  margin-left: 8px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}