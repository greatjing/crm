{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"monaco-editor-wrapper\"\n};\nvar _hoisted_2 = {\n  \"class\": \"monaco-editor-container\",\n  ref: \"editorContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sources":["/Users/guojingjing/2024-ai-code/crm/frontend/src/components/MonacoEditor.vue"],"sourcesContent":["<template>\n  <div class=\"monaco-editor-wrapper\">\n    <div class=\"monaco-editor-container\" ref=\"editorContainer\"></div>\n  </div>\n</template>\n\n<script setup>\nimport * as monaco from 'monaco-editor'\nimport { onMounted, onBeforeUnmount, watch, ref, nextTick } from 'vue'\n\nconst props = defineProps({\n  modelValue: {\n    type: String,\n    default: ''\n  },\n  language: {\n    type: String,\n    default: 'javascript'\n  }\n})\n\nconst emit = defineEmits(['update:modelValue'])\nconst editorContainer = ref(null)\nlet editor = null\n\nconst initEditor = async () => {\n  await nextTick()\n  \n  if (!editorContainer.value) return\n  \n  // 销毁旧的编辑器实例\n  if (editor) {\n    editor.dispose()\n  }\n\n  editor = monaco.editor.create(editorContainer.value, {\n    value: props.modelValue,\n    language: props.language,\n    theme: 'vs-dark',\n    automaticLayout: false, // 关闭自动布局\n    minimap: { enabled: false },\n    scrollBeyondLastLine: false,\n    lineNumbers: 'on',\n    roundedSelection: false,\n    wordWrap: 'on'\n  })\n\n  // 手动处理布局更新\n  const updateEditorLayout = () => {\n    if (editor) {\n      editor.layout()\n    }\n  }\n\n  const resizeObserver = new ResizeObserver(() => {\n    window.requestAnimationFrame(() => {\n      updateEditorLayout()\n    })\n  })\n\n  resizeObserver.observe(editorContainer.value)\n\n  editor.onDidChangeModelContent(() => {\n    emit('update:modelValue', editor.getValue())\n  })\n\n  // 保存引用以便清理\n  editor._resizeObserver = resizeObserver\n}\n\nonMounted(() => {\n  initEditor()\n})\n\nonBeforeUnmount(() => {\n  if (editor) {\n    if (editor._resizeObserver) {\n      editor._resizeObserver.disconnect()\n    }\n    editor.dispose()\n  }\n})\n\nwatch(() => props.modelValue, (newValue) => {\n  if (editor && newValue !== editor.getValue()) {\n    editor.setValue(newValue)\n  }\n})\n\nwatch(() => props.language, (newValue) => {\n  if (editor) {\n    monaco.editor.setModelLanguage(editor.getModel(), newValue)\n  }\n})\n</script>\n\n<style>\n.monaco-editor-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n}\n\n.monaco-editor-container {\n  width: 100%;\n  height: 100%;\n  border: 1px solid #dcdfe6;\n}\n\n/* 确保编辑器内容区域正确显示 */\n.monaco-editor {\n  padding: 8px;\n}\n\n/* 修复编辑器内容区域的样式 */\n.monaco-editor .overflow-guard {\n  width: 100% !important;\n  height: 100% !important;\n}\n</style> "],"mappings":";;EACO,SAAM;AAAuB;;EAC3B,SAAM,yBAAyB;EAACA,GAAG,EAAC;;;uBAD3CC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAiE,OAAjEC,UAAiE,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}