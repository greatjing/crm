{"ast":null,"code":"import _objectSpread from \"/Users/guojingjing/2024-ai-code/crm/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport * as monaco from 'monaco-editor';\nimport { onMounted, onBeforeUnmount, watch, ref } from 'vue';\n\n// Python 代码片段\nvar pythonSnippets = [{\n  label: 'def',\n  insertText: 'def ${1:function_name}(${2:parameters}):\\n\\t${3:pass}',\n  documentation: '创建一个函数'\n}, {\n  label: 'class',\n  insertText: 'class ${1:ClassName}:\\n\\tdef __init__(self):\\n\\t\\t${2:pass}',\n  documentation: '创建一个类'\n}, {\n  label: 'if',\n  insertText: 'if ${1:condition}:\\n\\t${2:pass}',\n  documentation: 'if 条件语句'\n}, {\n  label: 'for',\n  insertText: 'for ${1:item} in ${2:items}:\\n\\t${3:pass}',\n  documentation: 'for 循环'\n}, {\n  label: 'try',\n  insertText: 'try:\\n\\t${1:pass}\\nexcept ${2:Exception} as e:\\n\\t${3:pass}',\n  documentation: '异常处理'\n}];\n\n// SQL 代码片段\nvar sqlSnippets = [{\n  label: 'SELECT',\n  insertText: 'SELECT ${1:*}\\nFROM ${2:table_name}\\nWHERE ${3:condition}',\n  documentation: '查询数据'\n}, {\n  label: 'INSERT',\n  insertText: 'INSERT INTO ${1:table_name} (${2:columns})\\nVALUES (${3:values})',\n  documentation: '插入数据'\n}, {\n  label: 'UPDATE',\n  insertText: 'UPDATE ${1:table_name}\\nSET ${2:column} = ${3:value}\\nWHERE ${4:condition}',\n  documentation: '更新数据'\n}, {\n  label: 'DELETE',\n  insertText: 'DELETE FROM ${1:table_name}\\nWHERE ${2:condition}',\n  documentation: '删除数据'\n}, {\n  label: 'JOIN',\n  insertText: 'SELECT ${1:*}\\nFROM ${2:table1}\\nJOIN ${3:table2} ON ${4:condition}',\n  documentation: '表连接'\n}];\n\n// 配置编辑器主题\nmonaco.editor.defineTheme('customTheme', {\n  base: 'vs-dark',\n  inherit: true,\n  rules: [{\n    token: 'keyword',\n    foreground: '569CD6',\n    fontStyle: 'bold'\n  }, {\n    token: 'string',\n    foreground: 'CE9178'\n  }, {\n    token: 'number',\n    foreground: 'B5CEA8'\n  }, {\n    token: 'comment',\n    foreground: '6A9955',\n    fontStyle: 'italic'\n  }],\n  colors: {\n    'editor.background': '#1E1E1E',\n    'editor.foreground': '#D4D4D4',\n    'editor.lineHighlightBackground': '#2F3337',\n    'editorCursor.foreground': '#FFFFFF',\n    'editor.selectionBackground': '#264F78'\n  }\n});\nexport default {\n  name: 'MonacoEditor',\n  props: {\n    modelValue: {\n      type: String,\n      \"default\": ''\n    },\n    language: {\n      type: String,\n      \"default\": 'javascript'\n    },\n    options: {\n      type: Object,\n      \"default\": function _default() {\n        return {};\n      }\n    },\n    readOnly: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  emits: ['update:modelValue', 'change', 'save'],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var editor = null;\n    var editorContainer = ref(null);\n    var defaultOptions = {\n      theme: 'customTheme',\n      fontSize: 14,\n      minimap: {\n        enabled: false\n      },\n      scrollBeyondLastLine: false,\n      automaticLayout: true,\n      tabSize: 4,\n      wordWrap: 'on',\n      wrappingIndent: 'indent',\n      autoIndent: 'advanced',\n      formatOnPaste: true,\n      formatOnType: true,\n      suggestOnTriggerCharacters: true,\n      snippetSuggestions: 'top',\n      lineNumbers: 'on',\n      renderWhitespace: 'selection',\n      matchBrackets: 'always',\n      autoClosingBrackets: 'always',\n      autoClosingQuotes: 'always',\n      folding: true,\n      showFoldingControls: 'always'\n    };\n    var registerLanguageProviders = function registerLanguageProviders() {\n      if (props.language === 'python') {\n        monaco.languages.registerCompletionItemProvider('python', {\n          provideCompletionItems: function provideCompletionItems() {\n            var suggestions = pythonSnippets.map(function (snippet) {\n              return {\n                label: snippet.label,\n                kind: monaco.languages.CompletionItemKind.Snippet,\n                insertText: snippet.insertText,\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n                documentation: snippet.documentation\n              };\n            });\n            return {\n              suggestions: suggestions\n            };\n          }\n        });\n      } else if (props.language === 'sql') {\n        monaco.languages.registerCompletionItemProvider('sql', {\n          provideCompletionItems: function provideCompletionItems() {\n            var suggestions = sqlSnippets.map(function (snippet) {\n              return {\n                label: snippet.label,\n                kind: monaco.languages.CompletionItemKind.Snippet,\n                insertText: snippet.insertText,\n                insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n                documentation: snippet.documentation\n              };\n            });\n            return {\n              suggestions: suggestions\n            };\n          }\n        });\n      }\n    };\n    var initMonaco = function initMonaco() {\n      var options = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions), props.options), {}, {\n        value: props.modelValue,\n        language: props.language,\n        readOnly: props.readOnly\n      });\n      editor = monaco.editor.create(editorContainer.value, options);\n      registerLanguageProviders();\n      editor.onDidChangeModelContent(function () {\n        var value = editor.getValue();\n        emit('update:modelValue', value);\n        emit('change', value);\n      });\n      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, function () {\n        emit('save', editor.getValue());\n      });\n\n      // 添加格式化命令\n      editor.addCommand(monaco.KeyMod.Alt | monaco.KeyMod.Shift | monaco.KeyCode.KeyF, function () {\n        editor.getAction('editor.action.formatDocument').run();\n      });\n    };\n    onMounted(function () {\n      initMonaco();\n    });\n    onBeforeUnmount(function () {\n      if (editor) {\n        editor.dispose();\n      }\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function (newValue) {\n      if (editor && newValue !== editor.getValue()) {\n        editor.setValue(newValue);\n      }\n    });\n    watch(function () {\n      return props.language;\n    }, function (newValue) {\n      if (editor) {\n        monaco.editor.setModelLanguage(editor.getModel(), newValue);\n        registerLanguageProviders();\n      }\n    });\n    watch(function () {\n      return props.readOnly;\n    }, function (newValue) {\n      if (editor) {\n        editor.updateOptions({\n          readOnly: newValue\n        });\n      }\n    });\n    return {\n      editorContainer: editorContainer\n    };\n  }\n};","map":{"version":3,"names":["monaco","onMounted","onBeforeUnmount","watch","ref","pythonSnippets","label","insertText","documentation","sqlSnippets","editor","defineTheme","base","inherit","rules","token","foreground","fontStyle","colors","name","props","modelValue","type","String","language","options","Object","default","readOnly","Boolean","emits","setup","_ref","emit","editorContainer","defaultOptions","theme","fontSize","minimap","enabled","scrollBeyondLastLine","automaticLayout","tabSize","wordWrap","wrappingIndent","autoIndent","formatOnPaste","formatOnType","suggestOnTriggerCharacters","snippetSuggestions","lineNumbers","renderWhitespace","matchBrackets","autoClosingBrackets","autoClosingQuotes","folding","showFoldingControls","registerLanguageProviders","languages","registerCompletionItemProvider","provideCompletionItems","suggestions","map","snippet","kind","CompletionItemKind","Snippet","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","initMonaco","_objectSpread","value","create","onDidChangeModelContent","getValue","addCommand","KeyMod","CtrlCmd","KeyCode","KeyS","Alt","Shift","KeyF","getAction","run","dispose","newValue","setValue","setModelLanguage","getModel","updateOptions"],"sources":["/Users/guojingjing/2024-ai-code/crm/frontend/src/components/MonacoEditor.vue"],"sourcesContent":["<template>\n  <div ref=\"editorContainer\" class=\"monaco-editor-container\"></div>\n</template>\n\n<script>\nimport * as monaco from 'monaco-editor'\nimport { onMounted, onBeforeUnmount, watch, ref } from 'vue'\n\n// Python 代码片段\nconst pythonSnippets = [\n  {\n    label: 'def',\n    insertText: 'def ${1:function_name}(${2:parameters}):\\n\\t${3:pass}',\n    documentation: '创建一个函数'\n  },\n  {\n    label: 'class',\n    insertText: 'class ${1:ClassName}:\\n\\tdef __init__(self):\\n\\t\\t${2:pass}',\n    documentation: '创建一个类'\n  },\n  {\n    label: 'if',\n    insertText: 'if ${1:condition}:\\n\\t${2:pass}',\n    documentation: 'if 条件语句'\n  },\n  {\n    label: 'for',\n    insertText: 'for ${1:item} in ${2:items}:\\n\\t${3:pass}',\n    documentation: 'for 循环'\n  },\n  {\n    label: 'try',\n    insertText: 'try:\\n\\t${1:pass}\\nexcept ${2:Exception} as e:\\n\\t${3:pass}',\n    documentation: '异常处理'\n  }\n]\n\n// SQL 代码片段\nconst sqlSnippets = [\n  {\n    label: 'SELECT',\n    insertText: 'SELECT ${1:*}\\nFROM ${2:table_name}\\nWHERE ${3:condition}',\n    documentation: '查询数据'\n  },\n  {\n    label: 'INSERT',\n    insertText: 'INSERT INTO ${1:table_name} (${2:columns})\\nVALUES (${3:values})',\n    documentation: '插入数据'\n  },\n  {\n    label: 'UPDATE',\n    insertText: 'UPDATE ${1:table_name}\\nSET ${2:column} = ${3:value}\\nWHERE ${4:condition}',\n    documentation: '更新数据'\n  },\n  {\n    label: 'DELETE',\n    insertText: 'DELETE FROM ${1:table_name}\\nWHERE ${2:condition}',\n    documentation: '删除数据'\n  },\n  {\n    label: 'JOIN',\n    insertText: 'SELECT ${1:*}\\nFROM ${2:table1}\\nJOIN ${3:table2} ON ${4:condition}',\n    documentation: '表连接'\n  }\n]\n\n// 配置编辑器主题\nmonaco.editor.defineTheme('customTheme', {\n  base: 'vs-dark',\n  inherit: true,\n  rules: [\n    { token: 'keyword', foreground: '569CD6', fontStyle: 'bold' },\n    { token: 'string', foreground: 'CE9178' },\n    { token: 'number', foreground: 'B5CEA8' },\n    { token: 'comment', foreground: '6A9955', fontStyle: 'italic' }\n  ],\n  colors: {\n    'editor.background': '#1E1E1E',\n    'editor.foreground': '#D4D4D4',\n    'editor.lineHighlightBackground': '#2F3337',\n    'editorCursor.foreground': '#FFFFFF',\n    'editor.selectionBackground': '#264F78'\n  }\n})\n\nexport default {\n  name: 'MonacoEditor',\n  props: {\n    modelValue: {\n      type: String,\n      default: ''\n    },\n    language: {\n      type: String,\n      default: 'javascript'\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    readOnly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: ['update:modelValue', 'change', 'save'],\n  setup(props, { emit }) {\n    let editor = null\n    const editorContainer = ref(null)\n\n    const defaultOptions = {\n      theme: 'customTheme',\n      fontSize: 14,\n      minimap: { enabled: false },\n      scrollBeyondLastLine: false,\n      automaticLayout: true,\n      tabSize: 4,\n      wordWrap: 'on',\n      wrappingIndent: 'indent',\n      autoIndent: 'advanced',\n      formatOnPaste: true,\n      formatOnType: true,\n      suggestOnTriggerCharacters: true,\n      snippetSuggestions: 'top',\n      lineNumbers: 'on',\n      renderWhitespace: 'selection',\n      matchBrackets: 'always',\n      autoClosingBrackets: 'always',\n      autoClosingQuotes: 'always',\n      folding: true,\n      showFoldingControls: 'always'\n    }\n\n    const registerLanguageProviders = () => {\n      if (props.language === 'python') {\n        monaco.languages.registerCompletionItemProvider('python', {\n          provideCompletionItems: () => {\n            const suggestions = pythonSnippets.map(snippet => ({\n              label: snippet.label,\n              kind: monaco.languages.CompletionItemKind.Snippet,\n              insertText: snippet.insertText,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              documentation: snippet.documentation\n            }))\n            return { suggestions }\n          }\n        })\n      } else if (props.language === 'sql') {\n        monaco.languages.registerCompletionItemProvider('sql', {\n          provideCompletionItems: () => {\n            const suggestions = sqlSnippets.map(snippet => ({\n              label: snippet.label,\n              kind: monaco.languages.CompletionItemKind.Snippet,\n              insertText: snippet.insertText,\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\n              documentation: snippet.documentation\n            }))\n            return { suggestions }\n          }\n        })\n      }\n    }\n\n    const initMonaco = () => {\n      const options = {\n        ...defaultOptions,\n        ...props.options,\n        value: props.modelValue,\n        language: props.language,\n        readOnly: props.readOnly\n      }\n\n      editor = monaco.editor.create(editorContainer.value, options)\n      registerLanguageProviders()\n\n      editor.onDidChangeModelContent(() => {\n        const value = editor.getValue()\n        emit('update:modelValue', value)\n        emit('change', value)\n      })\n\n      editor.addCommand(monaco.KeyMod.CtrlCmd | monaco.KeyCode.KeyS, () => {\n        emit('save', editor.getValue())\n      })\n\n      // 添加格式化命令\n      editor.addCommand(monaco.KeyMod.Alt | monaco.KeyMod.Shift | monaco.KeyCode.KeyF, () => {\n        editor.getAction('editor.action.formatDocument').run()\n      })\n    }\n\n    onMounted(() => {\n      initMonaco()\n    })\n\n    onBeforeUnmount(() => {\n      if (editor) {\n        editor.dispose()\n      }\n    })\n\n    watch(() => props.modelValue, (newValue) => {\n      if (editor && newValue !== editor.getValue()) {\n        editor.setValue(newValue)\n      }\n    })\n\n    watch(() => props.language, (newValue) => {\n      if (editor) {\n        monaco.editor.setModelLanguage(editor.getModel(), newValue)\n        registerLanguageProviders()\n      }\n    })\n\n    watch(() => props.readOnly, (newValue) => {\n      if (editor) {\n        editor.updateOptions({ readOnly: newValue })\n      }\n    })\n\n    return {\n      editorContainer\n    }\n  }\n}\n</script>\n\n<style scoped>\n.monaco-editor-container {\n  width: 100%;\n  height: 100%;\n  border-radius: 4px;\n  overflow: hidden;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}