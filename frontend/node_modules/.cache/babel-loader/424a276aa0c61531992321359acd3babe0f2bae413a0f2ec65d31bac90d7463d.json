{"ast":null,"code":"import { openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"editor-container\",\n  ref: \"editorContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, null, 512 /* NEED_PATCH */);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1"],"sources":["/Users/guojingjing/2024-ai-code/crm/frontend/src/components/MonacoEditor.vue"],"sourcesContent":["<template>\n  <div class=\"editor-container\" ref=\"editorContainer\"></div>\n</template>\n\n<script setup>\nimport * as monaco from 'monaco-editor'\nimport { onMounted, onBeforeUnmount, watch, ref } from 'vue'\n\nconst props = defineProps({\n  modelValue: {\n    type: String,\n    default: ''\n  },\n  language: {\n    type: String,\n    default: 'javascript'\n  }\n})\n\nconst emit = defineEmits(['update:modelValue'])\nconst editorContainer = ref(null)\nlet editor = null\n\nonMounted(() => {\n  editor = monaco.editor.create(editorContainer.value, {\n    value: props.modelValue,\n    language: props.language,\n    theme: 'vs-dark',\n    automaticLayout: true,\n    minimap: { enabled: false }\n  })\n\n  editor.onDidChangeModelContent(() => {\n    emit('update:modelValue', editor.getValue())\n  })\n})\n\nonBeforeUnmount(() => {\n  if (editor) {\n    editor.dispose()\n  }\n})\n\nwatch(() => props.modelValue, (newValue) => {\n  if (editor && newValue !== editor.getValue()) {\n    editor.setValue(newValue)\n  }\n})\n</script>\n\n<style>\n.editor-container {\n  width: 100%;\n  height: 100%;\n  border: 1px solid #dcdfe6;\n}\n</style> "],"mappings":";;EACO,SAAM,kBAAkB;EAACA,GAAG,EAAC;;;uBAAlCC,mBAAA,CAA0D,OAA1DC,UAA0D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}