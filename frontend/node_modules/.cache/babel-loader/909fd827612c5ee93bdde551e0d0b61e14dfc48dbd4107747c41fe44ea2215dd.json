{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nvar _hoisted_1 = {\n  \"class\": \"monaco-editor-wrapper\"\n};\nvar _hoisted_2 = {\n  \"class\": \"monaco-editor-container\",\n  ref: \"editorContainer\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2"],"sources":["/Users/guojingjing/2024-ai-code/crm/frontend/src/components/MonacoEditor.vue"],"sourcesContent":["<template>\n  <div class=\"monaco-editor-wrapper\">\n    <div class=\"monaco-editor-container\" ref=\"editorContainer\"></div>\n  </div>\n</template>\n\n<script setup>\nimport * as monaco from 'monaco-editor'\nimport { onMounted, onBeforeUnmount, watch, ref, nextTick } from 'vue'\n\nconst props = defineProps({\n  modelValue: {\n    type: String,\n    default: ''\n  },\n  language: {\n    type: String,\n    default: 'javascript'\n  }\n})\n\nconst emit = defineEmits(['update:modelValue'])\nconst editorContainer = ref(null)\nlet editor = null\n\n// 配置编辑器主题\nmonaco.editor.defineTheme('custom-theme', {\n  base: 'vs-dark',\n  inherit: true,\n  rules: [\n    { token: 'comment', foreground: '6A9955', fontStyle: 'italic' },\n    { token: 'keyword', foreground: '569cd6' },\n    { token: 'string', foreground: 'ce9178' },\n    { token: 'number', foreground: 'b5cea8' }\n  ],\n  colors: {\n    'editor.background': '#1e1e1e',\n    'editor.foreground': '#d4d4d4',\n    'editorCursor.foreground': '#ffffff',\n    'editor.lineHighlightBackground': '#2c313a',\n    'editorLineNumber.foreground': '#858585',\n    'editor.selectionBackground': '#264f78',\n    'editor.inactiveSelectionBackground': '#3a3d41'\n  }\n})\n\nconst defaultOptions = {\n  theme: 'custom-theme',\n  fontSize: 14,\n  fontFamily: 'Menlo, Monaco, \"Courier New\", monospace',\n  lineNumbers: 'on',\n  minimap: { enabled: false },\n  scrollBeyondLastLine: false,\n  automaticLayout: true,\n  tabSize: 2,\n  wordWrap: 'on',\n  wrappingIndent: 'indent',\n  autoIndent: 'full',\n  formatOnPaste: true,\n  formatOnType: true,\n  suggestOnTriggerCharacters: true,\n  acceptSuggestionOnEnter: 'on',\n  folding: true,\n  renderWhitespace: 'selection',\n  contextmenu: true,\n  scrollbar: {\n    vertical: 'visible',\n    horizontal: 'visible',\n    useShadows: true,\n    verticalHasArrows: true,\n    horizontalHasArrows: true\n  }\n}\n\n// SQL 代码片段\nconst sqlSnippets = [\n  {\n    label: 'SELECT',\n    insertText: 'SELECT ${1:*} FROM ${2:table_name} WHERE ${3:condition}',\n    documentation: '查询数据',\n    kind: monaco.languages.CompletionItemKind.Snippet\n  },\n  {\n    label: 'INSERT',\n    insertText: 'INSERT INTO ${1:table_name} (${2:columns}) VALUES (${3:values})',\n    documentation: '插入数据',\n    kind: monaco.languages.CompletionItemKind.Snippet\n  },\n  {\n    label: 'UPDATE',\n    insertText: 'UPDATE ${1:table_name} SET ${2:column} = ${3:value} WHERE ${4:condition}',\n    documentation: '更新数据',\n    kind: monaco.languages.CompletionItemKind.Snippet\n  },\n  {\n    label: 'DELETE',\n    insertText: 'DELETE FROM ${1:table_name} WHERE ${2:condition}',\n    documentation: '删除数据',\n    kind: monaco.languages.CompletionItemKind.Snippet\n  }\n]\n\n// Python 代码片段\nconst pythonSnippets = [\n  {\n    label: 'def',\n    insertText: 'def ${1:function_name}(${2:parameters}):\\n\\t${3:pass}',\n    documentation: '定义函数',\n    kind: monaco.languages.CompletionItemKind.Snippet\n  },\n  {\n    label: 'class',\n    insertText: 'class ${1:ClassName}:\\n\\tdef __init__(self):\\n\\t\\t${2:pass}',\n    documentation: '定义类',\n    kind: monaco.languages.CompletionItemKind.Snippet\n  },\n  {\n    label: 'if',\n    insertText: 'if ${1:condition}:\\n\\t${2:pass}',\n    documentation: 'if 条件语句',\n    kind: monaco.languages.CompletionItemKind.Snippet\n  },\n  {\n    label: 'for',\n    insertText: 'for ${1:item} in ${2:items}:\\n\\t${3:pass}',\n    documentation: 'for 循环',\n    kind: monaco.languages.CompletionItemKind.Snippet\n  }\n]\n\nconst registerCompletionProvider = () => {\n  if (props.language === 'sql') {\n    monaco.languages.registerCompletionItemProvider('sql', {\n      provideCompletionItems: () => {\n        return {\n          suggestions: sqlSnippets.map(snippet => ({\n            ...snippet,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n          }))\n        }\n      }\n    })\n  } else if (props.language === 'python') {\n    monaco.languages.registerCompletionItemProvider('python', {\n      provideCompletionItems: () => {\n        return {\n          suggestions: pythonSnippets.map(snippet => ({\n            ...snippet,\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet\n          }))\n        }\n      }\n    })\n  }\n}\n\nconst initEditor = async () => {\n  try {\n    await nextTick()\n    \n    if (!editorContainer.value) {\n      console.error('Editor container not found')\n      return\n    }\n\n    // 销毁旧的编辑器实例\n    if (editor) {\n      editor.dispose()\n    }\n\n    const options = {\n      ...defaultOptions,\n      value: props.modelValue || '',\n      language: props.language\n    }\n\n    editor = monaco.editor.create(editorContainer.value, options)\n    registerCompletionProvider()\n\n    // 监听内容变化\n    editor.onDidChangeModelContent(() => {\n      const value = editor.getValue()\n      emit('update:modelValue', value)\n    })\n\n    // 监听焦点变化\n    editor.onDidFocusEditorText(() => {\n      editor.layout()\n    })\n\n    // 设置初始值\n    if (props.modelValue) {\n      editor.setValue(props.modelValue)\n    }\n\n    // 自动调整布局\n    const resizeObserver = new ResizeObserver(() => {\n      if (editor) {\n        editor.layout()\n      }\n    })\n\n    resizeObserver.observe(editorContainer.value)\n    editor._resizeObserver = resizeObserver\n\n    // 聚焦编辑器\n    editor.focus()\n  } catch (error) {\n    console.error('Error initializing editor:', error)\n  }\n}\n\nonMounted(() => {\n  initEditor()\n})\n\nonBeforeUnmount(() => {\n  if (editor) {\n    if (editor._resizeObserver) {\n      editor._resizeObserver.disconnect()\n    }\n    editor.dispose()\n  }\n})\n\nwatch(() => props.modelValue, (newValue) => {\n  if (editor && newValue !== editor.getValue()) {\n    editor.setValue(newValue || '')\n  }\n})\n\nwatch(() => props.language, (newValue) => {\n  if (editor) {\n    monaco.editor.setModelLanguage(editor.getModel(), newValue)\n    registerCompletionProvider()\n  }\n})\n</script>\n\n<style>\n.monaco-editor-wrapper {\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: 1px solid #dcdfe6;\n  border-radius: 4px;\n  overflow: hidden;\n}\n\n.monaco-editor-container {\n  width: 100%;\n  height: 100%;\n}\n\n/* 确保编辑器内容区域正确显示 */\n.monaco-editor {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.monaco-editor .overflow-guard {\n  width: 100% !important;\n  height: 100% !important;\n}\n\n.monaco-editor .monaco-scrollable-element {\n  width: 100% !important;\n  height: 100% !important;\n}\n</style> "],"mappings":";;EACO,SAAM;AAAuB;;EAC3B,SAAM,yBAAyB;EAACA,GAAG,EAAC;;;uBAD3CC,mBAAA,CAEM,OAFNC,UAEM,GADJC,mBAAA,CAAiE,OAAjEC,UAAiE,8B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}